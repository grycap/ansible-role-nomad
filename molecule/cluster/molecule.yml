---
scenario:
  name: cluster
dependency:
  name: galaxy
driver:
  name: docker
verifier:
  name: ansible
platforms:
  - name: server0
    image: "geerlingguy/docker-${MOLECULE_DISTRO:-ubuntu2204}-ansible:latest"
    command: ${MOLECULE_DOCKER_COMMAND:-""}
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:rw
    cgroupns_mode: host
    privileged: true
    pre_build_image: true
    groups:
      - front
    networks:
      - name: "nomad"
    network_mode: "nomad"
    published_ports:
      - 8501/tcp
      - 4646/tcp
  - name: server1
    image: "geerlingguy/docker-${MOLECULE_DISTRO:-ubuntu2204}-ansible:latest"
    command: ${MOLECULE_DOCKER_COMMAND:-""}
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:rw
    cgroupns_mode: host
    privileged: true
    pre_build_image: true
    groups:
      - front
    networks:
      - name: "nomad"
    network_mode: "nomad"
    published_ports:
      - 8501/tcp
      - 4646/tcp
  - name: vnode-1
    image: "geerlingguy/docker-${MOLECULE_DISTRO:-ubuntu2204}-ansible:latest"
    command: ${MOLECULE_DOCKER_COMMAND:-""}
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:rw
    cgroupns_mode: host
    privileged: true
    pre_build_image: true
    groups:
      - wn
    networks:
      - name: "nomad"
    network_mode: "nomad"
    published_ports:
      - 8501/tcp
      - 4646/tcp
provisioner:
  name: ansible
  playbooks:
    converge: ${MOLECULE_PLAYBOOK:-converge.yml}
  inventory:
    host_vars:
      server0:
        nomad_master: true
    group_vars:
      front:
        server_enabled: true
        nomad_master: false
      wn:
        client_enabled: true
        nomad_master: false
